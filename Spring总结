spring总结：
    -07-22
        -spring简介
            -三大重要思想
                -IOC（控制反转，与DI是一个意思）
                    -将以往程序之间的依赖关系由依赖具体实现类转为依赖抽象接口
                -DI（依赖注入）
                    -定义
                        -将程序间的依赖关系通过ioc容器注入，而不是硬编码来实现
                    -方法
                        -通过成员变量的setter方法设值注入
                        -通过构造器注入
                -AOP（面向切面编程）
                    -将项目中的一个个模块独立出来进行单独处理
            -配置配置文件
                -为什么需要配置文件
                    -因为spring将所有类都看作bean（不同于之前的javaBean）；
                    -IOC容器即可存放所有的javaBean，并实现一些依赖关系的配置
                -如何配置
                    -<bean id="类的名称（作为唯一标识）" class="类所在的路径名称">
                        <property name="类中属性名称" ref="(如果有)依赖的类名称">
                    </bean>
            -调用bean
                -ApplicationContext ac=new ClassPathXmlApplicationContext("配置文件名称");//新建一个IOC容器
                -Computer computer=ac.getBean("computer");//通过bean中的唯一标识拿到类
                -computer.test();//测试
            -遇到的问题
                -No suitable driver for root；
                    -今天写测试例子的时候，这个问题困扰了我一晚上；仔细检查之后发现是getConnection(url,username,password)
                     这个方法里面的参数位置写反导致无法加载driver！！！
                     所以，一定要仔细！！！！
    -08-05
        -IOC容器
            -IOC容器的定义
                -spring中所有的类都是bean，ioc容器用来存放，管理bean，以及处理bean之间的依赖关系
            -Bean
                -IOC容器的实例化
                    -使用BeanFactory的实现类ApplicationContext实现
                        -ApplicationContext ac=new ClassPathXmlApplicationContext("配置文件名称")
                    -当有多个配置文件时：
                        -String[] beans={"配置文件1","配置文件2"};
                         ApplicationContext ac=new ClassPathXmlApplicationContext(beans);
                -bean的实例化
                    -spring内部默认使用默认构造器来初始化bean；
                    -也可以使用工厂或工厂类来实例化bean；
                -bean的scope(作用域)
                    -singleton(单例)
                        -在一个ioc容器中获得的bean是同一个bean
                        -Spring内部默认所有的bean都是单例模式下的作用域
                        -单例模式
                            -即该模式下的所有实例化的对象都是同一个对象
                    -Prototype(多例)
                        -在一个ioc容器中获得的bean是不同一个bean
                    -request，session，GlobalSession（web环境下的作用域）
            -08-07 Bean的生命周期
                    -定义
                        -在配置文件中配置bean的时候定义
                    -初始化
                        -三种初始化和销毁方式
                            -在配置文件外部配置全局定义的default-init-method和default-destroy-method，并在bean中实现;
                            -在bean配置里面配置init-method和destroy-method，并在该bean中实现;
                            -在bean对应的类里实现BeanInit和BeanDispose的接口，并实现其未实现的方法；
                        -三种初始化方式的影响
                            -当三种方式同时使用时，默认的全局初始化不起作用，先执行实现接口的方法，在执行bean配置里的方法；
                    -使用
                        -调用bean时使用
                    -销毁
                        -同初始化
                    -不同作用域下的生命周期
                        -当采用prototype作用域下的bean，spring不对其销毁负责，需要创建者自行销毁
                -Bean的自动装配
                    -bean的自动装配是指在外部配置文件中定义 default-autowire="",从而无需在bean内部配置注入方式
                        -no
                            不进行自动装配
                        -default
                            默认采用上一级标签的自动装配方法
                        -byName
                            -通过bean的id与设值注入的set方法的参数名进行对应，如果对的上，就自动装配；
                        -byType
                            -通过bean的class来与设值注入的set方法的类名进行对应，如果对的上，就自动装配
                        -Constructor
                            -通过构造器的入参类型进行对应，自动装配，本质上还是byType，与bean的id无关
                        -auto-detected
                            -自动查找装配方法，如果没有无参构造器，则采用byType进行setter设值注入；
                                             如果有参数构造器，则使用constructor方法注入
                    -bean自动装配的好处
                        -可以减少setter注入的大量property标签和constructor注入的大量constructor-arg标签
                -Resource资源管理（Resource：针对于资源文件的统一接口）
                    -获得资源的步骤
                        -资源管理类实现ApplicationContextAware接口，获得applicationContext上下文对象，并配置到配置文件中;
                        -通过Resource类接受Resource resource= applicationContext.getResource("")方法所传递的资源;
                        -利用resource对象的各种方法获得资源的相关属性;
                    -获得资源的路径方式
                        -url路径（获取url路径资源）
                            -在getResource()方法内部参数前加入-url:-前缀，即getResource("url:url路径");
                        -file路径（获取文件系统路径资源）
                            -在getResource()方法内部参数前加入-file:-前缀，即getResource("file:文件全路径");
                        -classpath路径（当前项目中的路径资源）
                            -在getResource()方法内部参数前加入-classpath:-前缀，即getResource("classpath:项目内文件名称");
                -bean的注解
                    -不使用xml文件进行注册，而使用java自带的注解方式进行bean的注册以及作用域的设置
                    -在配置文件中配置<context:component-scan base-package="bean所在的包"></context:component-scan>
                    -@Componnet,@Service,@Resource,@Controller（bean的注册注解）
                        -在类外部用注解@Component(不知道属于哪个层),@Service,@Resource,@Controller等;
                         默认名称为类名首字母小写,也可以自行在xml文件中配置
                    -@Scope（作用域注解）
                        -默认为singleton单例，可在@Scope("作用域")配置，也可在xml文件中自行配置;
                    -@AutoWired（bean依赖注入注解）
                        -@required只适用于setter设值注入
                        -@AutoWired适用于各种注入方式
                        -@AutoWired(required=false)可以避免找不到依赖类无法注入报异常的情况
                        -@AutoWired(required=true)，一个构造器只允许有一个类为true
                        -@AutoWired可用于集合属性的依赖注入，若是list，size属性的集合可添加@Order属性进行排序
                    -@Qualifier
                        -当有多个bean依赖于某个bean时，可以在bean中先@AutoWired设值注入
                         再使用@Qualifier("bean的id")声明具体是哪一个bean
                        -主要用于@AutoWired下缩小范围
                    -@Configuration，@Bean
                        -@Configuration通常与@Bean配合使用
                            -@Configuration在类外部定义，相当于xml中的<beans>,需要添加扫包配置；
                             @Bean在声明或初始化一个bean的方法外部进行注解，即可注册该方法实现的bean，相当于xml中的<bean>
                        -@Bean可以配置name，初始化以及销毁方法
                         若无配置，则默认该bean的name为生成这个bean的方法名
                    -@ImportResource,@Value
                        -@ImportResource是指将资源文件用该注解导入（配置文件）
                        -@Value是指将资源文件里面的属性使用$("属性名")的方法导入（配置文件里面资源文件的属性）
                    -@Scope
                        -配置该bean的作用域，默认为单例的
                        -可设置@Scope(value="作用域")来指定作用域
                    -@Resource（与@Autowired注解类似）
                        -在jsr-250的标准里可以使用Resource对被依赖类进行注入
                            -可以对被依赖类在依赖类里的成员变量上注入
                            -也可以对被依赖类在依赖类里的setter方法上注入
                    -@Inject，与@Named注解，与@Autowired注解作用同效

        -DI(依赖注入)
            -DI的三种方式
                -设值注入
                    -将类之间的通过set方法来设置依赖关系，再通过配置文件中的ref元素标签注入
                -构造器注入
                    -将被依赖类通过依赖类构造器参数的形式注入，通过配置文件的ref标签注入
                -接口注入（不常用）
            -空值注入
                -注入null
                    -在内部使用<null/>标签
                -注入空值
                    -使用<value></value>
            -依赖注入的属性设置
                -引用属性
                    -在<property><constructor-arg>内部使用ref元素标签设置引用属性，表示对另一个bean的引用
                    -若引用的bean在另一个配置文件中，可使用ref标签内的bean属性，即<ref bean="bean名称"/>
                -集合属性
                    -List
                        -配置
                            -<property name="list">
                                 <list>
                                     <value>vanic</value>
                                     <value>lc</value>
                                 </list>
                            </property>
                    -遍历
                        for循环遍历
                    -Set
                        -配置
                            -<property name="list">
                                 <Set>
                                     <value>vanic</value>
                                     <value>lc</value>
                                 </Set>
                            </property>
                        -遍历
                            迭代器Iterator遍历
                                -Iterator it=set.iterator();
                                 while(it.hasNext()){
                                    ...
                                 }
                    Map
                        -配置
                            <map>
                                <entry>//表示一个键值对
                                    <key>
                                        <value>...</value>//key值
                                    </key>
                                    <value>...<value>//value值
                                </entry>
                                <entry>
                                    //同上，表示下一个键值对
                                </entry>
                            </map>
                        -遍历
                            -先利用迭代器得到key的set集合
                                -Set keys=map.keySet();
                            -遍历key的set集合得到对应的value值
                                -Iterator keyIt=keys.Iterator();
                                 while(keyIt.hasNext()){
                                    String key=(String)keyIt.next();
                                    String value=(String)map.get(key);
                                    ...
                                 }
                    Properties
                        -配置
                            <props>
                                <prop key="key值">对应的值</prop>
                                <prop></prop>//另一个prop
                            </props>
                        -遍历
                            -无须遍历，直接根据key得到值
    -08-08
        -AOP（面向切面编程）
            -概念
                -将一些贯穿整个项目的模块独立出来，使用预编译或代理的方法，在其他模块需要使用时切入；
            -基本概念
                -切面（Aspect 独立出来的作用于多个模块）
                    -一个关注点的模块化，可以横切多个对象（模块的service）
                -连接点（Joinpoint 要执行切入的service层的某个连接点，比如方法的执行）
                    -程序执行过程的某个特定的点
                -通知（Advice 对某个连接点要执行切入时候的动作）
                    -概念
                        -在切面的某个连接点上要执行的特定的动作
                    -类型（根据连接点的同而不同）
                        -前置通知（Before Advice）
                            -在某个连接点之前执行的通知，但不能阻止连接点前的执行，除非抛出异常；
                        -返回后通知(After returning)
                            -在某个连接点正常完成执行（有return）的通知
                        -抛出异常通知（After throwing Advice）
                            -在连接点执行时抛出异常时的通知
                        -后通知（After(finally)Advice）
                            -在某个连接点退出的时候执行的通知（无论是不是正常退出）
                        -环绕通知（Around Advice）
                            -包围一个连接点的通知
                -切入点（Pointcut 与连接点匹配的点）
                    -与连接点匹配的断言
                -引入（Introduction）
                    -在不修改代码的前提下为类添加新的属性和方法
                -目标对象（Target Object）
                    -被一个或多个切面所通知的对象
                -AOP代理（AOP proxy）
                    -AOP框架所创建的对象，用来实现切面契约（包括切入时的通知操作等）
                -织入（weaving）
                    -把切面连接到其他应用程序类型或者对象中，并创建一个被通知的对象，分为编译时织入，类加载时织入，执行时织入
            -基于配置的AOP
                -<aop:config>
                    -内部必须按照pointCut，advisor，aspect的顺序进行配置
                 </aop:config>
                -aspect的配置
                    -<aop:aspect id="",ref="关联bean，将其作为切面类"></aop:aspect>
                -pointCut的配置
                    -<aop:pointcut id="",expression:"execution(*所要切入的类.*(..))"></aop:pointcut>//切入到所要切入的类里
                     的所有方法
                -advice的配置
                    -前置通知（在service的方法执行前通知）
                        -<aop:before method="beforeAdvice" pointcut-ref="servicePointCut"/>
                    -返回后通知（在service有返回值之后通知）
                        -<aop:after-returning method="afterReturning" pointcut-ref="servicePointCut" />
                    -抛出异常后通知（在service有异常抛出后通知）
                        -<aop:after-throwing method="afterThrowing" pointcut-ref="servicePointCut"/>】
                    -结束后通知（无论是否正常结束，都会通知）
                        -<aop:after method="after" pointcut-ref="servicePointCut"/>
                    -环绕通知（在service开始前开始后都会通知）
                        -方法的第一个参数必须为ProceedingJoinPoint
                        -<aop:around method="around" pointcut-ref="servicePointCut"/>
                    -带参数的通知
                        -service里面的方法带参数时，切面中切向该方法的方法必须带相同的参数（同属性，同名称）
                        -<aop:around method="aroundInit" pointcut="execution(* aopServiceBeans.AopServiceBean.init
                         (String,int ))and args(serviceName,serviceTimes)"/>//切入点中必须明确指明参数类型，参数名称
                -Introductions的应用
                    -可以将实现某一个接口的实现类成为所有匹配该应用的service层里面的类的父类，可以直接强制转换service层的类
                     得到该接口的实例，从而操作接口中的方法
                    -配置
                        -<aop:declare-parents types-matching="aopServiceBeans.*"
                         implement-interface="dao.Fit" default-impl="daoImpl.FitImpl"/>
                    -拿到父类
                        -ApplicationContext ac=new ClassPathXmlApplicationContext("aopbeans.xml");
                         Fit fit = (Fit) ac.getBean("aopServiceBean");//成为父类后强制转换拿到实例
                -基于配置的切面的bean只支持单例模式
        08-09
            -基于AspectJ的AOP配置
                -概念
                    -使用了类似纯java注解的方法来配置AOP
                -AspectJ的配置
                    -xml格式
                        -<aop:aspectj-autoproxy/>
                    -注解
                        -@Configuration
                         @EnabledAspectJAutoProxy
                -AspectJ配置AOP
                    -切面的配置
                        -使用注解@Aspect//ioc容器不会根据类类型来自动识别该注解配置的bean，所以必须配置这个bean
                                       //可以在xml配置文件中配置bean，也可以使用@Component注解配置bean
                                       //一旦使用@Component注解，就必须在xml文件中扫描配置该注解
                    -切入点的配置
                        -使用注解@PointCut配置//匹配该切入点的方法必须是void类型;
                        -可以使用如&&，||，！=之类的逻辑符号来配置切入点里面切入的方法;
                    -通知的配置
                        -前置通知
                            -使用@Before("execution(作用的范围)")，或是使用已经配置好的切入点@Before("pointCut()");
                            -注意：直接再里面调用已经配置好的切入点，无需添加参数（after，around同样）
                        -后置通知
                            -@After("execution(作用的范围)")，或是使用已经配置好的切入点@Before("pointCut()");
                        -返回后通知
                            -@AfterReturning(pointcut="pointCut()",eturning="retVal");
                            -注意：
                                1、在配置切入点和返回值的时候需要添加参数（pointcut，returning）；
                                2、在该通知方法中必须有与配置的参数相同的方法参数retVal，类型可用Object表示（因为位置）
                        -异常后通知
                            -@AfterThrowing(pointcut="pointCut()",throwing="ex");
                            -注意：
                                1、在配置切入点和返回值的时候需要添加参数（pointcut，throwing）；
                                2、在该通知方法中必须有与注解中的异常类型相同的参数ex）
                        -环绕通知
                            -@Around("execution(作用的范围)")，或是使用已经配置好的切入点@Before("pointCut()");
                            -注意：
                                1、方法中必须要有ProceedJoinPoint类型的参数
                                2、环绕方法写在pjp.proceed()上下
                                3、该通知方法必须有返回值来接收被切入方法的返回值（即使是void类型，void类型也有自身特殊的返回值）
                    -带参数的通知
                        -普通参数类型
                            -可以在切入点的注解上添加参数，该参数表示service方法中的参数
                                -@Pointcut("execution(* aopServiceBeans.AspectJServiceBean.*(..)&&args(argsName))")
                            -可以在通知方法的注解上添加参数，该参数表示service方法中的参数
                                - @Before("pointCut()&&args(arg)")
                                -注意:
                                    -args()括号里面是参数的名称而不是类型//！！！！！
                                    -使用该切入点的通知方法里面必须有该参数同时指定该参数的类型
                        -注解参数类型
                            -首先声明一个注解
                                -@Retention(RetentionPolicy.CLASS)
                                 @Target(ElementType.METHOD)
                                 public @interface AnnotationMethod {
                                      String value();
                                 }
                            -在service方法上配置该注解，可为其传递参数值
                                -@AnnotationMethod("this is annotation")
                            -在通知注解或是切入点注解上包含该参数
                                -@Before("pointCut()&&@annotation(am)")
                            -注意:
                                -args()括号里面是参数的名称而不是类型//！！！！
                                -使用该切入点的通知方法里面必须有该参数同时指定该参数的类型
        08-10
            spring中的事务
                -事务的概念
                    -定义
                        -事务指的是逻辑中的一组操作，要么全部成功，要么全部失败
                    -特性
                        -原子性
                            -事务是最小的逻辑单位，不可被分割，要么全部执行，要么全部不执行
                        -一致性
                            -事务执行前后的数据的完整性保持不变
                        -隔离性
                            -当前事务在执行的时候不应受到其他事物的干扰，与其他事务无关
                        -持久性
                            -事务的执行所造成的数据影响是永久的
                    -数据的脏读，幻读，不可重复读
                        -脏读
                            -一个事务读到了另一个事务改写但还未提交的数据，如果这些数据被回滚，那么读取得到的数据就是无效的
                        -不可重复读
                            -在同一事务中，多次读取相同的数据，结果不同
                        -幻读
                            -一个事务读取了几行数据之后，另一个事务插入一些记录，第一个事务再次读取就会读取到一些原来没有读取到的记录
                -spring中事务API
                    -PlatformTransactionManager
                        -事务平台管理的接口，可根据不同的平台产生不同的实例等
                            -DataResourceTransaction（适用于jdbc,mybatis等框架）
                            -HibernateTransaction（适用于hibernate框架）
                    -TransactionDefinition
                        -事务定义的接口，可设置事务的隔离级别，事务的传播行为，事务的超时时间等
                        -事务的隔离级别
                            -default（spring中定义的，根据不同数据库自身的隔离级别来设置事务的隔离级别）
                            -READ_UNCOMMITED
                                -允许读取还未提交的改变了的数据，可能会导致脏读，不可重复读以及幻读
                            -READ_COMMITED（Oracle数据库默认的隔离级别）
                                -允许在并发事务已经提交后读取，可防止脏读，但仍有可能出现幻读以及不可重复读的情况
                            -REPEATABLE_READ(MySQL数据库默认的隔离级别)
                                -对相同字段的多次读取是一致的，除非数据本身被事务所改变，可防止脏读，不可重复度，但幻读仍然存在
                            -SERIALIZABLE
                                -锁定在事务中的数据，完全防止脏读，不可重复读以及幻读
                        -事务的传播行为(7种，解决业务层之间方法的相互调用而产生的事务如何传递的问题)
                            -定义：
                                -当业务层里面的多个方法都用到事务，而某个方法需要调用其中的多个方法才能执行，这就涉及到事物的传播行为
                            -主要的传播行为
                                -PROPAGATION_REQUIRED
                                    -当多个方法处在同一事务中时，支持当前事务（一个方法里的），不存在就新建一个；
                                -PROPAGATION_REQUIRES_NEW
                                    -当多个方法处在不同事务中时，如果有事务存在，就挂起当前事务，新建一个事务
                                -PROPAGATION_NESTED
                                    -当多个方法处在不同事务中时，如果有事务存在，就嵌套事务执行
                    -TransactionStatus
                        -事务状态的接口，主要用来保存以及判断事务当前的状态
                -spring中的事务管理
                    -编程式事务管理
                    -声明式事务管理
                        -基于TransactionProxyFactoryBean
                        -基于AspectJ
                        -基于注解
                            -无论基于什么，都需要先配置事务管理器，将连接池注入
                            -打开注解事务
                                -<tx:annotation-driven transaction-manager="事务管理器id"/>
                            -在需要进行事务管理的类外面添加注解@Transactional,在括号里面可以配置事务的参数